{"version":3,"file":"static/js/636.7d480327.chunk.js","mappings":"iQAEaA,EAAWC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2IAUpBC,EAAaH,EAAAA,GAAAA,OAAaI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,oS,mBCK1BG,EAAY,WACvB,IAAMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAQF,EAAAA,EAAAA,IAAYG,EAAAA,IAEpBC,GAAcJ,EAAAA,EAAAA,IAAYK,EAAAA,IAC1BC,GAAcN,EAAAA,EAAAA,IAAYO,EAAAA,IAC1BC,GAAaR,EAAAA,EAAAA,IAAYS,EAAAA,IACzBC,GAAaV,EAAAA,EAAAA,IAAYW,EAAAA,IACzBC,GAAWC,EAAAA,EAAAA,MAEXC,GAAOd,EAAAA,EAAAA,IAAYe,EAAAA,IAMnBC,EAAgBjB,EAAMkB,QAAO,SAAAC,GACjC,GAAId,GAAec,EAAKC,OAASf,EAC/B,OAAO,EAET,GAAIE,GACgBc,WAAWF,EAAKG,YAAYC,QAAQ,IAAK,KAC3CF,WAAWd,GACzB,OAAO,EAGX,QAAIE,GAAcU,EAAKK,QAAUC,SAAShB,EAAY,QAGlDE,GAAcQ,EAAKK,QAAUC,SAASd,EAAY,IAIxD,IACMe,EAAe1B,EAAM2B,OAASxB,EAAMwB,OAE1C,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,KACXD,EAAAA,EAAAA,KAACrC,EAAQ,CAAAoC,SACNZ,EAAce,KAAI,SAAAb,GACjB,OAAOW,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,CAACC,OAAQf,GCvCf,WAAH,IAAIgB,EAAIC,UAAAT,OAAA,QAAAU,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,GAAG,GAAG,CD0BsCG,GACtC,MAGD7B,EAAcU,OAAS,GAAKD,IAC3BI,EAAAA,EAAAA,KAACjC,EAAU,CAACkD,QAlCK,WACrB,IAAMC,EAAWjC,EAAO,EACxBF,GAASoC,EAAAA,EAAAA,IAAeD,GAC1B,EA+B0CnB,SAAC,WAI7C,EE7De,SAASqB,IACtB,IAAMrC,GAAWC,EAAAA,EAAAA,MACXqC,GAAYlD,EAAAA,EAAAA,IAAYmD,EAAAA,IACxBC,GAAQpD,EAAAA,EAAAA,IAAYqD,EAAAA,IAU1B,OARAC,EAAAA,EAAAA,YAAU,WACR1C,GAAS2C,EAAAA,EAAAA,MACX,GAAG,CAAC3C,KAEJ0C,EAAAA,EAAAA,YAAU,WACR1C,GAAS4C,EAAAA,EAAAA,MACX,GAAG,CAAC5C,KAGFe,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACGsB,IAAcE,IAASvB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4BAC3BC,EAAAA,EAAAA,KAAC/B,EAAS,MAGhB,C","sources":["components/AutoCardList/AutoCardList.styled.js","components/AutoCardList/AutoCardList.js","../node_modules/nanoid/index.browser.js","pages/Catalog.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const AutoList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 29px;\n  padding: 0px;\n  row-gap: 50px;\n  column-gap: 29px;\n`;\n\nexport const LoadButton = styled.button`\n  max-width: 100px;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 100px;\n\n  background-color: transparent;\n  color: var(--accent-color);\n  font-size: 16px;\n  font-weight: 500;\n  border: none;\n  &:hover {\n    color: var(--hover-color);\n  }\n`;\n\n// export const Wrapper = styled.div`\n//   display: flex;\n//   direction: column;\n//   justify-content: center;\n// `;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectAutos,\n  selectBrandFilter,\n  selectMaxMileageFilter,\n  selectMinMileageFilter,\n  selectPriceFilter,\n  selectTotalAutos,\n} from 'redux/selectors';\nimport { AutoCard } from 'components/AutoCard/AutoCard';\nimport { AutoList, LoadButton } from './AutoCardList.styled';\nimport { FilterForm } from 'components/FormikForm/FormikForm';\n\nimport { selectNextPage } from 'redux/selectors';\nimport { fetchNextAutos } from 'redux/operations';\nimport { nanoid } from 'nanoid';\n\nexport const AutosList = () => {\n  const autos = useSelector(selectAutos);\n  const total = useSelector(selectTotalAutos);\n\n  const brandFilter = useSelector(selectBrandFilter);\n  const priceFilter = useSelector(selectPriceFilter);\n  const minMileage = useSelector(selectMinMileageFilter);\n  const maxMileage = useSelector(selectMaxMileageFilter);\n  const dispatch = useDispatch();\n\n  const page = useSelector(selectNextPage);\n\n  const handleLoadMore = () => {\n    const nextPage = page + 1;\n    dispatch(fetchNextAutos(nextPage));\n  };\n  const filteredAutos = autos.filter(auto => {\n    if (brandFilter && auto.make !== brandFilter) {\n      return false;\n    }\n    if (priceFilter) {\n      const autoPrice = parseFloat(auto.rentalPrice.replace('$', ''));\n      if (autoPrice > parseFloat(priceFilter)) {\n        return false;\n      }\n    }\n    if (minMileage && auto.mileage < parseInt(minMileage, 10)) {\n      return false;\n    }\n    if (maxMileage && auto.mileage > parseInt(maxMileage, 10)) {\n      return false;\n    }\n    return true;\n  });\n  const hasMoreAutos = autos.length < total.length;\n\n  return (\n    <div>\n      <FilterForm />\n      <AutoList>\n        {filteredAutos.map(auto => {\n          return <AutoCard onCard={auto} key={nanoid()} />;\n        })}\n      </AutoList>\n\n      {filteredAutos.length > 0 && hasMoreAutos && (\n        <LoadButton onClick={handleLoadMore}>Load</LoadButton>\n      )}\n    </div>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAutos, fetchTotalAutos } from 'redux/operations';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport { AutosList } from 'components/AutoCardList/AutoCardList';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchAutos());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(fetchTotalAutos());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {isLoading && !error && <b>Loading in progress...</b>}\n      <AutosList />\n    </div>\n  );\n}\n"],"names":["AutoList","styled","_templateObject","_taggedTemplateLiteral","LoadButton","_templateObject2","AutosList","autos","useSelector","selectAutos","total","selectTotalAutos","brandFilter","selectBrandFilter","priceFilter","selectPriceFilter","minMileage","selectMinMileageFilter","maxMileage","selectMaxMileageFilter","dispatch","useDispatch","page","selectNextPage","filteredAutos","filter","auto","make","parseFloat","rentalPrice","replace","mileage","parseInt","hasMoreAutos","length","_jsxs","children","_jsx","FilterForm","map","AutoCard","onCard","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","onClick","nextPage","fetchNextAutos","Contacts","isLoading","selectIsLoading","error","selectError","useEffect","fetchAutos","fetchTotalAutos"],"sourceRoot":""}